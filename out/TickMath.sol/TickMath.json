{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a968787b2f0c236d4bc7e3eebcf050c614a886a0d264e4638284f94c4cba925964736f6c63430008170033","sourceMap":"293:4000:43:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;293:4000:43;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a968787b2f0c236d4bc7e3eebcf050c614a886a0d264e4638284f94c4cba925964736f6c63430008170033","sourceMap":"293:4000:43:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswapContracts/=lib/v3-core/contracts/\",\":@uniswapPeriphery/=lib/v3-periphery/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":v3-core/=lib/v3-core/\",\":v3-periphery/=lib/v3-periphery/contracts/\"]},\"sources\":{\"src/libraries/TickMath.sol\":{\"keccak256\":\"0x651d26348fb7c28ca3ee236d74c3a9a8307d67ae634050fc2961802e95cc10d9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4b7daf54ebfad556bac3626c9250ba41a19c9661a70122d06e89ffede28adb72\",\"dweb:/ipfs/Qmf89JV27z6jZNu7RrVgzLAoMXboUe6HUUBWSYXtXEXm2P\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswapContracts/=lib/v3-core/contracts/","@uniswapPeriphery/=lib/v3-periphery/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","v3-core/=lib/v3-core/","v3-periphery/=lib/v3-periphery/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/libraries/TickMath.sol":"TickMath"},"evmVersion":"paris","libraries":{}},"sources":{"src/libraries/TickMath.sol":{"keccak256":"0x651d26348fb7c28ca3ee236d74c3a9a8307d67ae634050fc2961802e95cc10d9","urls":["bzz-raw://4b7daf54ebfad556bac3626c9250ba41a19c9661a70122d06e89ffede28adb72","dweb:/ipfs/Qmf89JV27z6jZNu7RrVgzLAoMXboUe6HUUBWSYXtXEXm2P"],"license":"MIT"}},"version":1},"id":43}